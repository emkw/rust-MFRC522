/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
//! Self-test routine.
//!
//! By default it's not included, set feature `self-test` for inclusion.
//!
//! Provides `self_test()` method for MFRC522.

use MFRC522;
use pcd::Cmd;
use pcd::reg::Reg;
use pcd::reg::bits::*;

impl<'a> MFRC522<'a> {
	/**
	 * Performs a self-test of the MFRC522
	 * See 16.1.1 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
     **/
	pub fn self_test(&mut self) -> bool {
		// This follows directly the steps outlined in 16.1.1
		// 1. Perform a soft reset.
		self.pcd_soft_reset();

		// 2. Clear the internal buffer by writing 25 bytes of 00h.
		let zeroes: [u8; 25] = [0; 25];
		// flush the FIFO buffer
		self.register_set_bit_mask(Reg::FIFOLevel, 0x80);
		// write 25 bytes of 00h to FIFO
		self.register_write_slice(Reg::FIFOData, zeroes.as_ref());
		// transfer to internal buffer
		self.pcd_command(Cmd::Mem);

		// 3. Enable self-test.
		self.register_write(Reg::AutoTest, 0x09);

		// 4. Write 00h to FIFO buffer.
		self.register_write(Reg::FIFOData, 0x00);
	
		// 5. Start self-test by issuing the CalcCRC command.
		self.pcd_command(Cmd::CalcCRC);

		// 6. Wait for self-test to complete.
		for _ in 0..0xFF {
			let divirq = self.reg_divirq();
			// CRCIRq bit is set <=> calculation done.
			if divirq.intersects(CRCIRq) {
				break;
			}
		}
		// Stop calculating CRC for new content in the FIFO.
		self.pcd_command(Cmd::Idle);

		// 7. Read out resulting 64 bytes from the FIFO buffer.
		let mut result: [u8; 64] = [0; 64];
		self.register_read_to_slice(Reg::FIFOData, result.as_mut(), 0);

		// Determine firmware version (see section 9.3.4.8 in spec)
		let version = self.register_read(Reg::Version);
		// Pick the appropriate reference values.
		let reference = match version {
			0x88 => reference::FM17522,
			0x90 => reference::MFRC522_V0_0,
			0x91 => reference::MFRC522_V1_0,
			0x92 => reference::MFRC522_V2_0,

			// Unknown version - abort test
			_    => return false,
		};

		// Verify that the results match up to our expectations.
		for i in 0..reference.len() {
			if result[i] != reference[i] {
				return false;
			}
		}

		// Test passed; all is good.
		true
	}
}

pub mod reference {
	//! Reference data for self-test, based on firmware version

	/// Clone
	/// Fudan Semiconductor FM17522 (0x88)
	pub const FM17522: [u8; 64] = [
		0x00, 0xD6, 0x78, 0x8C, 0xE2, 0xAA, 0x0C, 0x18,
		0x2A, 0xB8, 0x7A, 0x7F, 0xD3, 0x6A, 0xCF, 0x0B,
		0xB1, 0x37, 0x63, 0x4B, 0x69, 0xAE, 0x91, 0xC7,
		0xC3, 0x97, 0xAE, 0x77, 0xF4, 0x37, 0xD7, 0x9B,
		0x7C, 0xF5, 0x3C, 0x11, 0x8F, 0x15, 0xC3, 0xD7,
		0xC1, 0x5B, 0x00, 0x2A, 0xD0, 0x75, 0xDE, 0x9E,
		0x51, 0x64, 0xAB, 0x3E, 0xE9, 0x15, 0xB5, 0xAB,
		0x56, 0x9A, 0x98, 0x82, 0x26, 0xEA, 0x2A, 0x62
	];

	/// Version 0.0 (0x90)
	/// Philips Semiconductors; Preliminary Specification Revision 2.0 - 01 August 2005; 16.1 Sefttest
	pub const MFRC522_V0_0: [u8; 64] = [
		0x00, 0x87, 0x98, 0x0f, 0x49, 0xFF, 0x07, 0x19,
		0xBF, 0x22, 0x30, 0x49, 0x59, 0x63, 0xAD, 0xCA,
		0x7F, 0xE3, 0x4E, 0x03, 0x5C, 0x4E, 0x49, 0x50,
		0x47, 0x9A, 0x37, 0x61, 0xE7, 0xE2, 0xC6, 0x2E,
		0x75, 0x5A, 0xED, 0x04, 0x3D, 0x02, 0x4B, 0x78,
		0x32, 0xFF, 0x58, 0x3B, 0x7C, 0xE9, 0x00, 0x94,
		0xB4, 0x4A, 0x59, 0x5B, 0xFD, 0xC9, 0x29, 0xDF,
		0x35, 0x96, 0x98, 0x9E, 0x4F, 0x30, 0x32, 0x8D
	];

	/// Version 1.0 (0x91)
	/// NXP Semiconductors; Rev. 3.8 - 17 September 2014; 16.1.1 Self test
	pub const MFRC522_V1_0: [u8; 64] = [
		0x00, 0xC6, 0x37, 0xD5, 0x32, 0xB7, 0x57, 0x5C,
		0xC2, 0xD8, 0x7C, 0x4D, 0xD9, 0x70, 0xC7, 0x73,
		0x10, 0xE6, 0xD2, 0xAA, 0x5E, 0xA1, 0x3E, 0x5A,
		0x14, 0xAF, 0x30, 0x61, 0xC9, 0x70, 0xDB, 0x2E,
		0x64, 0x22, 0x72, 0xB5, 0xBD, 0x65, 0xF4, 0xEC,
		0x22, 0xBC, 0xD3, 0x72, 0x35, 0xCD, 0xAA, 0x41,
		0x1F, 0xA7, 0xF3, 0x53, 0x14, 0xDE, 0x7E, 0x02,
		0xD9, 0x0F, 0xB5, 0x5E, 0x25, 0x1D, 0x29, 0x79
	];

	/// Version 2.0 (0x92)
	/// NXP Semiconductors; Rev. 3.8 - 17 September 2014; 16.1.1 Self test
	pub const MFRC522_V2_0: [u8; 64] = [
		0x00, 0xEB, 0x66, 0xBA, 0x57, 0xBF, 0x23, 0x95,
		0xD0, 0xE3, 0x0D, 0x3D, 0x27, 0x89, 0x5C, 0xDE,
		0x9D, 0x3B, 0xA7, 0x00, 0x21, 0x5B, 0x89, 0x82,
		0x51, 0x3A, 0xEB, 0x02, 0x0C, 0xA5, 0x00, 0x49,
		0x7C, 0x84, 0x4D, 0xB3, 0xCC, 0xD2, 0x1B, 0x81,
		0x5D, 0x48, 0x76, 0xD5, 0x71, 0x61, 0x21, 0xA9,
		0x86, 0x96, 0x83, 0x38, 0xCF, 0x9D, 0x5B, 0x6D,
		0xDC, 0x15, 0xBA, 0x3E, 0x7D, 0x95, 0x3B, 0x2F
	];
}
